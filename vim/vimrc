" Basic {{{
" General {{{
set nocompatible
set autoread    " Detect when a file is changed
set modelines=1 " Read vim settings from last line of file
set hidden
set nostartofline
set mouse=a
set encoding=utf-8
set nobackup
" }}}
" UI {{{
set number
syntax enable
set background=dark " will be overriden by colorscheme if installed

set wildmenu

" Status Bar Stuff
set ruler
set laststatus=2
set showcmd
set cmdheight=2

" The annoying bell
set noerrorbells
set visualbell
set t_vb=
set tm=500

set hlsearch
set lazyredraw
set ttyfast
set timeoutlen=300

set cursorline
highlight LineNr ctermfg=blue
highlight CursorLine cterm=none ctermbg=none
highlight CursorLineNr ctermfg=green

let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode

" }}}
" Spaces & Tabs {{{
set tabstop=4
set expandtab
set softtabstop=4
set shiftwidth=4
filetype indent on
filetype plugin on
" }}}
" Foldlines {{{
function! NeatFoldText()
    let line = ' ' . substitute(getline(v:foldstart), '^\s*"\?\s*\|\s*"\?\s*{{' . '{\d*\s*', '', 'g') . ' '
    let lines_count = v:foldend - v:foldstart + 1
    let lines_count_text = '| ' . printf("%10s", lines_count . ' lines') . ' |'
    let foldchar = matchstr(&fillchars, 'fold:\zs.')
    let foldtextstart = strpart('+' . repeat(foldchar, (v:foldlevel-1)*0) . line, 0, (winwidth(0)*2)/3)
    let foldtextend = lines_count_text . repeat(foldchar, 8)
    let foldtextlength = strlen(substitute(foldtextstart . foldtextend, '.', 'x', 'g')) + &foldcolumn
    return foldtextstart . repeat(foldchar, winwidth(0)-foldtextlength) . foldtextend
endfunction
set foldtext=NeatFoldText()
" }}}
" Functions {{{
function! NumberToggle()
    if(&relativenumber == 1)
        set number
    else
        set relativenumber
    endif
endfunc
" }}}
" Navigation & Keyboard {{{
" Fix backspace
set backspace=indent,eol,start

" Map Leader
let mapleader = ','
let g:mapleader = ','

set history=1000

nmap <space> za
nnoremap <C-n> :call NumberToggle()<cr>

map <silent> <leader>1 :diffget 1 <bar> :diffupdate<CR>
map <silent> <leader>2 :diffget 2 <bar> :diffupdate<CR>
map <silent> <leader>3 :diffget 3 <bar> :diffupdate<CR>
" }}}
" }}}

" Advanced{{{
" DepCheck Start {{{
if exists ("$dotfiles")
    let s:vplug_dir = '$dotfiles/external/vim/plugged'
endif
if exists ("$vplug_dir")
    let s:vplug_dir = '$vplug_dir'
endif
if exists ('s:vplug_dir')
" }}}
" Plugins {{{
call plug#begin(s:vplug_dir)
Plug 'tpope/vim-fugitive'
Plug 'flazz/vim-colorschemes'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

Plug 'ctrlpvim/ctrlp.vim'
Plug 'scrooloose/nerdtree', { 'on': ['NERDTreeToggle', 'NERDTreeFind'] }

Plug 'benmills/vimux'
call plug#end()
" }}}
" Plugin Functions {{{
function! FugitiveDiff()
    Gsdiff :1
    wincmd k
    Gvdiff
endfunction
command! Fdiff call FugitiveDiff()
" }}}
" Style {{{
colorscheme hybrid
let g:airline_powerline_fonts=1
" let g:airline_left_sep=''
" let g:airline_right_sep=''
let g:airline_theme='wombat'
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = ''
highlight LineNr ctermfg=blue
highlight CursorLine cterm=none ctermbg=none
highlight CursorLineNr ctermfg=green

" }}}
" DepCheck End {{{
    unlet s:vplug_dir
endif
" }}}
" }}}

" vim:foldmethod=marker:foldlevel=0
